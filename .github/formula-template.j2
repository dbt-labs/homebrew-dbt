class {{ classname }} < Formula
  include Language::Python::Virtualenv

  desc "{{ summary|capitalize }}"
  homepage "{{ homepage }}"
  url "{{ source_url }}"
  sha256 "{{ source_checksum }}"
  # license ""
{%- if revision is defined %}
  revision {{ revision }}
{%- endif %}

  depends_on "rust" => :build
{%- if package in ('dbt-postgres', 'dbt-redshift') %}
  depends_on "postgresql"
{%- endif %}
  depends_on "python@3.9"

{{ resources }}

  def install
    ENV["CARGO_NET_GIT_FETCH_WITH_CLI"] = "true"
    venv = virtualenv_create(libexec, "python3")
    venv.instance_variable_get(:@formula).system venv.instance_variable_get(:@venv_root)/"bin/pip", "install",
      "--upgrade", "pip"

{%- if package != 'dbt-snowflake' %}
    resources.each do |r|
      venv.pip_install r
    end
{% else %}
    resources.each do |r|
      if r.name == "snowflake-connector-python"
        # workaround for installing `snowflake-connector-python`
        # package w/o build-system deps (e.g. pyarrow)
        # adds the `--no-use-pep517` parameter
        r.stage do
          venv.instance_variable_get(:@formula).system venv.instance_variable_get(:@venv_root)/"bin/pip", "install",
            "-v", "--no-deps", "--no-binary", ":all:", "--ignore-installed", "--no-use-pep517", Pathname.pwd
        end
      else
        venv.pip_install r
      end
    end
{%- endif %}

    venv.pip_install_and_link buildpath

    bin.install_symlink "#{libexec}/bin/dbt" => "dbt"
  end

  test do
    false
  end
end
